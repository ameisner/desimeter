#!/usr/bin/env python


"""
Code that fits the ray trace table.

The ray trace table can be regenerated by running the script run.py
in the sub-directory desimeter/py/desimeter/transform/tan2fp/raytrace/

"""


import numpy as np
import argparse
from astropy.table import Table
from pkg_resources import resource_filename
from desimeter.transform.tan2fp.raytracefit import TAN2FP_RayTraceFit


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Fit ray tracing data to model the tan2fp transform with corrector distortions.""")

parser.add_argument('-i','--infile', type = str, default = None, required = False, help = 'trace tracing data, default is data/raytrace-tan2fp-4957-v17.csv')
parser.add_argument('-o','--outfile', type = str, default = None, required = True, help = 'output json file with fitted transfo.')
parser.add_argument('--plot',action="store_true",help="test and plot the transfo results.")
parser.add_argument('--test',action="store_true",help="test (but dont plot).")

args = parser.parse_args()

if args.infile :
    ifilename = args.infile
else :
    ifilename = resource_filename("desimeter","data/raytrace-tan2fp-4957-v17.csv")

print("reading {}".format(ifilename))
table = Table.read(ifilename,format="csv")		


tan2fp = TAN2FP_RayTraceFit()
tan2fp.fit(table)
tan2fp.write_jsonfile(args.outfile)
print("wrote {}".format(args.outfile))


if args.plot or args.test :
    
    tan2fp =  TAN2FP_RayTraceFit.read_jsonfile(filename=args.outfile)
    print(tan2fp.adc1)

    if args.plot: 
        import matplotlib.pyplot as plt

    print("Testing TAN -> FP")
    for adc1 in np.unique(table["ADC1"]) :
        ii=np.where(table["ADC1"]==adc1)[0]
        adc2=table["ADC2"][ii[0]]
        xtan_raytrace=table["X_TAN"][ii]
        ytan_raytrace=table["Y_TAN"][ii]
        xfp_raytrace=table["X_FP"][ii]
        yfp_raytrace=table["Y_FP"][ii]
        xfp_pol,yfp_pol=tan2fp.tan2fp(xtan_raytrace,ytan_raytrace,adc1=adc1,adc2=adc2)

        rms2d = np.sqrt( np.mean(  (xfp_pol-xfp_raytrace)**2 + (yfp_pol-yfp_raytrace)**2 ) )
        print("ADC1={} ADC2={}, rms2d = {:5.4f} microns".format(adc1,adc2,1000*rms2d))

        if args.plot :
            plt.figure("FP-{}-{}".format(adc1,adc2))
            a=plt.subplot(111)
            a.set_title("ADC1={} ADC2={}".format(adc1,adc2))
            plt.quiver(xfp_raytrace,yfp_raytrace,xfp_pol-xfp_raytrace,yfp_pol-yfp_raytrace)
            

    print("Testing FP -> TAN")
    for adc1 in np.unique(table["ADC1"]) :
        ii=np.where(table["ADC1"]==adc1)[0]
        adc2=table["ADC2"][ii[0]]
        xtan_raytrace=table["X_TAN"][ii]
        ytan_raytrace=table["Y_TAN"][ii]
        xfp_raytrace=table["X_FP"][ii]
        yfp_raytrace=table["Y_FP"][ii]
        xtan_pol,ytan_pol=tan2fp.fp2tan(xfp_raytrace,yfp_raytrace,adc1=adc1,adc2=adc2)
        
        rms2d = np.sqrt( np.mean(  (xtan_pol-xtan_raytrace)**2 + (ytan_pol-ytan_raytrace)**2 ) )
        print("ADC1={} ADC2={}, rms2d = {:5.4f} arcsec".format(adc1,adc2,rms2d*180*3600./np.pi))

        if args.plot :
            plt.figure("TAN-{}-{}".format(adc1,adc2))
            a=plt.subplot(111)
            a.set_title("ADC1={} ADC2={}".format(adc1,adc2))
            plt.quiver(xtan_raytrace,ytan_raytrace,xtan_pol-xtan_raytrace,ytan_pol-ytan_raytrace)
    
    if args.plot :
        plt.show()


