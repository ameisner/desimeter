#!/usr/bin/env python

import argparse
import sys,os
import numpy as np
import astropy.io.fits as pyfits

from desimeter.log import get_logger
from desimeter.fieldmodel import FieldModel
from desimeter.time import mjd2lst

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""FVC image processing""")
parser.add_argument('-i','--infile', type = str, default = None, required = True,
                    help = 'path to a GFA catalog file, fits or csv, like ""')
parser.add_argument('-o','--outfile', type = str, default = None, required = True,
                    help = 'path to output json file with transformation parameters')
parser.add_argument('--fits-header', type = str, default = None, required = True,
                    help = 'path to file with fits header to read time and sky coordinates')

args  = parser.parse_args()
log   = get_logger()

fm = FieldModel()

header  = pyfits.open(args.fits_header)[1].header
fm.ra  = header["TARGTRA"]
fm.dec = header["TARGTDEC"]
fm.hexrot_deg = float(header["FOCUS"].split(",")[5])/3600.

catalog = fm.read_guide_stars_catalog(args.infile)

# MJD and LST are needed for sky transform
fm.mjd    = np.mean(catalog["mjd_obs"])
fm.lst    = mjd2lst(fm.mjd)

fm.fit_tancorr(catalog)

# save it
with open(args.outfile, 'w') as file:
    file.write(fm.tojson())
print("wrote",args.outfile)
