#!/usr/bin/env python

import os,sys
import psycopg2
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table
import datetime
import argparse

from desimeter.util import parse_fibers


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Match posmovedb and FVC data""")

parser.add_argument('--date-min', type = str, default = "2019-01-01", required = False, help="date min with format YYYY-MM-DD")
parser.add_argument('--date-max', type = str, default = "2030-01-01", required = False, help="date max with format YYYY-MM-DD")
parser.add_argument('--clock-offset', type = float, default = "0", required = False, help="FVC - posmovedb offset. =0 at KPNO, =-276sec for LBNL test (beyonce is late)")
#parser.add_argument('--deltat-min', type = float, default = "0", required = False, help="min delay between FVC image and posmovedb entry in seconds (can be negative if clocks are not synchronized (as is the case for petal 1)")
parser.add_argument('--deltat-max', type = float, default = "25", required = False, help="max delay between FVC image and posmovedb entry in seconds")
parser.add_argument('--fvc-file-list', type = str, default = "/global/cfs/cdirs/desi/engineering/fvc/desimeter/v0.2.0/fvc-desimeter-and-dates.csv", required = False, help="file with the fvc file list")
parser.add_argument('--outdir', type = str, default = "None", required = True, help="output directory where MXXXX.csv files are saved")
parser.add_argument('--nocalib', action = 'store_true', help="do not save matching calib")
parser.add_argument('--host', type= str, required=False, default='db.replicator.dev-cattle.stable.spin.nersc.org', help="db.replicator.dev-cattle.stable.spin.nersc.org for kpno or beyonce.lbl.gov for petaltest")
parser.add_argument('--port', type= int, required=False, default=60042, help="60042 for kpno or 5432 for petaltest")
parser.add_argument('--password', type= str, required=False, default=None, help="nothing for kpno")
parser.add_argument('--petal-ids', type= str, required=False, default=None, help="select petal ids")

args  = parser.parse_args()

petalids=None
if args.petal_ids is not None :
    petalids=parse_fibers(args.petal_ids)


comm = psycopg2.connect(host=args.host,port=args.port, database='desi_dev', user='desi_reader',password=args.password)
cx=comm.cursor()

if petalids is None :
    print("get list of petalid ...")
    cx.execute("select relname from pg_class where relkind='r' and relname !~ '^(pg_|sql_)';")
    tables=[d[0] for d in cx.fetchall()]
    petalids=[]
    for table in tables :
        if table.find("positioner_moves_p")>=0 :
            tmp=table.replace("positioner_moves_p","")
            #print(tmp)
            try :
                i=int(tmp)
                if i<20 :
                    print(table)
                    petalids.append(i)
            except ValueError :
                pass

#sys.exit(12)
petal_id2loc = dict()
petal_id2loc[2]=7
petal_id2loc[3]=3
petal_id2loc[4]=0
petal_id2loc[5]=1
petal_id2loc[6]=2
petal_id2loc[7]=8
petal_id2loc[8]=4
petal_id2loc[9]=9
petal_id2loc[10]=5
petal_id2loc[11]=6

# lbl petal 1 tests
petal_id2loc[1]=0

print("reading csv table with list of desimeter files ...")
dmt=Table.read(args.fvc_file_list)
tstamp_fvc = np.array([datetime.datetime.strptime(d,"%Y-%m-%dT%H:%M:%S").timestamp() for d in dmt["DATE"]])
print("done")
jj=np.argsort(tstamp_fvc)
dmt=dmt[:][jj]
tstamp_fvc=tstamp_fvc[jj]



for petalid in petalids :
    
    print("get list of positioners for petalid {} ...".format(petalid))
    cx.execute("select distinct pos_id,device_loc from posmovedb.positioner_moves_p{}".format(petalid))
    data=cx.fetchall()
    posids=np.array([d[0] for d in data])
    devicelocs=np.array([d[1] for d in data])
    petalloc=petal_id2loc[petalid]
    locations=petalloc*1000+devicelocs
    print(posids)
    print(locations)
    print("number of positioners= {}".format(len(posids)))
    
    print("get unique recorded times ...".format(petalid))
    cx.execute("select distinct time_recorded from posmovedb.positioner_moves_p{}".format(petalid))
    data=cx.fetchall()
    date=[d[0] for d in data]
    print("number of unique time_recorded = {}".format(len(date)))
    for i in range(len(date)) :
        date[i] = datetime.datetime(date[i].year,date[i].month,date[i].day,date[i].hour,date[i].minute,date[i].second) # get rid of time zone
    tstamp_posmovedb =  np.array([d.timestamp() for d in date])

    print("match FVC image ...")
    dmt_index=np.zeros(tstamp_posmovedb.size,dtype=int)
    for i in range(tstamp_posmovedb.size) :
        j=np.where((tstamp_fvc+args.clock_offset)>tstamp_posmovedb[i])[0]
        if j.size>0 :
            dmt_index[i]=j[0]
            #dmt_deltat[i]=tstamp_fvc[j[0]]-tstamp[i]
        else :
            dmt_index[i]=len(dmt)-1
    tstamp_fvc=tstamp_fvc[dmt_index]
    dmt_deltat=tstamp_fvc+args.clock_offset-tstamp_posmovedb
    selection = np.where((dmt_deltat>=0)&(dmt_deltat<=args.deltat_max))[0] # FVC image less than n seconds after move
    print("number of matched FVC images= {}".format(len(selection)))
    #selected_date=date[selection]
    #selected_tstamp=tstamp[selection]
    #selected_dmt_index=dmt_index[selection]
    #selected_dmt_deltat=dmt_deltat[selection]

    posid_tstamp_posmovedb=dict()
    posid_tstamp_fvc=dict()
    posid_deltat=dict()
    posid_x_dmt=dict()
    posid_y_dmt=dict()
    for posid in posids :
        posid_tstamp_posmovedb[posid]=[]
        posid_tstamp_fvc[posid]=[]
        posid_deltat[posid]=[]
        posid_x_dmt[posid]=[]
        posid_y_dmt[posid]=[]
        
    print("loop on FVC images and collect positioner coordinates ...")
    for count,i in enumerate(selection) :
        filename = dmt["FILE"][dmt_index[i]]
        filename_date=dmt["DATE"][dmt_index[i]]
        if os.path.isfile(filename) :
            print("{}/{} {} {} {}".format(count+1,len(selection),date[i],filename_date,filename))
            dmt_xytable=Table.read(filename)

            for posid,loc in zip(posids,locations) :
                kk=np.where(dmt_xytable["LOCATION"]==loc)[0]
                if kk.size>0 :
                    posid_tstamp_posmovedb[posid].append(tstamp_posmovedb[i])
                    posid_tstamp_fvc[posid].append(tstamp_fvc[i])
                    posid_deltat[posid].append(dmt_deltat[i])
                    posid_x_dmt[posid].append(dmt_xytable["X_FP"][kk[0]])
                    posid_y_dmt[posid].append(dmt_xytable["Y_FP"][kk[0]])
        #if count>300 : break # debug

    for posid,deviceloc in zip(posids,devicelocs) :
        posid_tstamp_posmovedb[posid]=np.array(posid_tstamp_posmovedb[posid])
        posid_tstamp_fvc[posid]=np.array(posid_tstamp_fvc[posid])
        posid_deltat[posid]=np.array(posid_deltat[posid])
        posid_x_dmt[posid]=np.array(posid_x_dmt[posid])
        posid_y_dmt[posid]=np.array(posid_y_dmt[posid])
        
    print("now for each positioner read pos_t and pos_p in db...")
    for posid,deviceloc in zip(posids,devicelocs) :
        #cx.execute("select pos_t,pos_p,time_recorded,pos_id,petal_id,device_loc,log_note from posmovedb.positioner_moves_p{} where pos_id='{}' and time_recorded BETWEEN date '{}' and date '{}'".format(petalid,posid,args.date_min,args.date_max))
        cx.execute("select petal_id,device_loc,pos_id,pos_move_index,time_recorded,bus_id,pos_t,pos_p,last_meas_obs_x,last_meas_obs_y,last_meas_peak,last_meas_fwhm,total_move_sequences,total_cruise_moves_t,total_cruise_moves_p,total_creep_moves_t,total_creep_moves_p,ctrl_enabled,move_cmd,move_val1,move_val2,log_note from posmovedb.positioner_moves_p{} where pos_id='{}' and time_recorded BETWEEN date '{}' and date '{}'".format(petalid,posid,args.date_min,args.date_max))
        data=cx.fetchall()
        res=dict()
        for i,desc in enumerate(cx.description) :
            res[desc[0]]=np.array([d[i] for d in data])
        date = res["time_recorded"]

        # make sure there is no coma
        for i in range(res["log_note"].size) :
            if res["log_note"][i] is not None:
                res["log_note"][i]=str(res["log_note"][i]).replace(",",";")
                
        for i in range(len(date)) :
            #date[i].tzinfo = None  # does this help?
            date[i] = datetime.datetime(date[i].year,date[i].month,date[i].day,date[i].hour,date[i].minute,date[i].second) # get rid of time zone
        tstamp_posmovedb =  np.array([d.timestamp() for d in date])


            
        
        jj = np.where(np.in1d(tstamp_posmovedb,posid_tstamp_posmovedb[posid]))[0]

        if jj.size == 0:
            print("ERROR: {} {}/{} DB entries match desimeter data".format(posid,jj.size, len(data)))
            continue

        print("for {} got {} entries in db, with {} matched to desimeter data".format(posid,len(data),jj.size))
        kk = np.argsort(tstamp_posmovedb[jj])
        jj = jj[kk]
        for k in res.keys() :
            res[k] = res[k][jj]
        tstamp_posmovedb = tstamp_posmovedb[jj]
        dd = {t:i for i,t in enumerate(posid_tstamp_posmovedb[posid])}
        jj = [dd[t] for t in tstamp_posmovedb]
        x_dmt = posid_x_dmt[posid][jj]
        y_dmt = posid_y_dmt[posid][jj]
        deltat = posid_deltat[posid][jj]
        tstamp_fvc = posid_tstamp_fvc[posid][jj]
        
        if not args.nocalib :
            
            # adding calib info
            
            cmd="select * from posmovedb.positioner_calibration_p{} where pos_id='{}' order by time_recorded".format(petalid,posid)
            cx.execute(cmd)
            data2=cx.fetchall()
            res2=dict()
            for i,desc in enumerate(cx.description) :
                res2[desc[0]]=[d[i] for d in data2]
            date2 = res2["time_recorded"]
            for i in range(len(date2)) :
                date2[i] = datetime.datetime(date2[i].year,date2[i].month,date2[i].day,date2[i].hour,date2[i].minute,date2[i].second) # get rid of time zone
            tstamp_calib =  np.array([d.timestamp() for d in date2])

            ckeys=['pos_calib_index','calib_date','length_r1','length_r2','offset_x','offset_y','offset_t','offset_p','physical_range_t','physical_range_p','gear_calib_t','gear_calib_p','total_limit_seeks_t', 'total_limit_seeks_p', 'last_primary_hardstop_dir_t', 'last_primary_hardstop_dir_p', 'keepout_expansion_phi_radial', 'keepout_expansion_phi_angular', 'keepout_expansion_theta_radial', 'keepout_expansion_theta_angular']
            for k in ckeys :
                res[k]=[]
            
            for t in tstamp_posmovedb :
                j=np.where(tstamp_calib<t)[0][-1]
                for k in ckeys :
                    if k=='calib_date' :
                        k2='time_recorded'
                    else :
                        k2=k
                    res[k].append(res2[k2][j])
            for k in ckeys :
                res[k]=np.array(res[k])
            
        # save this
        jj=np.where(x_dmt!=0)[0]
        ot = Table()
        ot["PETAL_LOC"] = np.repeat(petalloc,jj.size)
        for k in res.keys() :
            if k=="time_recorded" :
                k2="DATE"
            else :
                k2=k.upper()
            ot[k2] = res[k][jj]
        ot["X_FP"]  = x_dmt[jj]
        ot["Y_FP"]  = y_dmt[jj]
        ot["DELTAT"]  = deltat[jj]
        ot["TSTAMP_POSMOVE"]  = tstamp_posmovedb[jj]
        ot["TSTAMP_FVC"]  = tstamp_fvc[jj]
        
        if not os.path.isdir(args.outdir) :
            os.makedirs(args.outdir)
        ofilename="{}/{}.csv".format(args.outdir,posid)
        ot.write(ofilename,overwrite=True)
        print("wrote",ofilename)
        #sys.exit(12)
    
 
