#!/usr/bin/env python

import os,sys
import psycopg2
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import Table
import datetime

import argparse

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Match posmovedb and FVC data""")

parser.add_argument('--date-min', type = str, default = "2019-01-01", required = False, help="date min with format YYYY-MM-DD")
parser.add_argument('--date-max', type = str, default = "2030-01-01", required = False, help="date max with format YYYY-MM-DD")
parser.add_argument('--deltat-max', type = float, default = "25", required = False, help="max delay between FVC image and posmovedb entry in seconds")
parser.add_argument('--fvc-file-list', type = str, default = "/global/cfs/cdirs/desi/engineering/fvc/desimeter/v0.2.0/fvc-desimeter-and-dates.csv", required = False, help="file with the fvc file list")

args  = parser.parse_args()

comm = psycopg2.connect(host='db.replicator.dev-cattle.stable.spin.nersc.org',port=60042, database='desi_dev', user='desi_reader')
cx=comm.cursor()

print("get list of petalid ...")
cx.execute("select relname from pg_class where relkind='r' and relname !~ '^(pg_|sql_)';")
tables=[d[0] for d in cx.fetchall()]
petalids=[]
for table in tables :
    if table.find("positioner_moves_p")>=0 :
        tmp=table.replace("positioner_moves_p","")
        #print(tmp)
        try :
            i=int(tmp)
            if i<20 :
                print(table)
                petalids.append(i)
        except ValueError :
            pass

#sys.exit(12)
petal_id2loc = dict()
petal_id2loc[2]=7
petal_id2loc[3]=3
petal_id2loc[4]=0
petal_id2loc[5]=1
petal_id2loc[6]=2
petal_id2loc[7]=8
petal_id2loc[8]=4
petal_id2loc[9]=9
petal_id2loc[10]=5
petal_id2loc[11]=6

print("reading csv table with list of desimeter files ...")
dmt=Table.read(args.fvc_file_list)
dmt_tstamp = np.array([datetime.datetime.strptime(d,"%Y-%m-%dT%H:%M:%S").timestamp() for d in dmt["DATE"]])
print("done")
jj=np.argsort(dmt_tstamp)
dmt=dmt[:][jj]
dmt_tstamp=dmt_tstamp[jj]

for petalid in petalids :
    
    print("get list of positioners for petalid {} ...".format(petalid))
    cx.execute("select distinct pos_id,device_loc from posmovedb.positioner_moves_p{}".format(petalid))
    data=cx.fetchall()
    posids=np.array([d[0] for d in data])
    devicelocs=np.array([d[1] for d in data])
    petalloc=petal_id2loc[petalid]
    locations=petalloc*1000+devicelocs
    print(posids)
    print(locations)
    print("number of positioners= {}".format(len(posids)))
    
    print("get unique recorded times ...".format(petalid))
    cx.execute("select distinct time_recorded from posmovedb.positioner_moves_p{}".format(petalid))
    data=cx.fetchall()
    date=[d[0] for d in data]
    print("number of unique time_recorded = {}".format(len(date)))
    for i in range(len(date)) :
        date[i] = datetime.datetime(date[i].year,date[i].month,date[i].day,date[i].hour,date[i].minute,date[i].second) # get rid of time zone
    tstamp =  np.array([d.timestamp() for d in date])

    print("match FVC image ...")
    dmt_index=np.zeros(tstamp.size,dtype=int)
    for i in range(tstamp.size) :
        j=np.where(dmt_tstamp>tstamp[i])[0]
        if j.size>0 :
            dmt_index[i]=j[0]
            #dmt_deltat[i]=dmt_tstamp[j[0]]-tstamp[i]
        else :
            dmt_index[i]=len(dmt)-1
    dmt_deltat=dmt_tstamp[dmt_index]-tstamp
    selection = np.where((dmt_deltat>0)&(dmt_deltat<args.deltat_max))[0] # FVC image less than n seconds after move
    print("number of matched FVC images= {}".format(len(selection)))
    #selected_date=date[selection]
    #selected_tstamp=tstamp[selection]
    #selected_dmt_index=dmt_index[selection]
    #selected_dmt_deltat=dmt_deltat[selection]

    posid_tstamp=dict()
    posid_deltat=dict()
    posid_x_dmt=dict()
    posid_y_dmt=dict()
    for posid in posids :
        posid_tstamp[posid]=[]
        posid_deltat[posid]=[]
        posid_x_dmt[posid]=[]
        posid_y_dmt[posid]=[]
        
    print("loop on FVC images and collect positioner coordinates ...")
    for count,i in enumerate(selection) :
        filename = dmt["FILE"][dmt_index[i]]
        filename_date=dmt["DATE"][dmt_index[i]]
        if os.path.isfile(filename) :
            print("{}/{} {} {} {}".format(count+1,len(selection),date[i],filename_date,filename))
            dmt_xytable=Table.read(filename)

            for posid,loc in zip(posids,locations) :
                kk=np.where(dmt_xytable["LOCATION"]==loc)[0]
                if kk.size>0 :
                    posid_tstamp[posid].append(tstamp[i])
                    posid_deltat[posid].append(dmt_deltat[i])
                    posid_x_dmt[posid].append(dmt_xytable["X_FP"][kk[0]])
                    posid_y_dmt[posid].append(dmt_xytable["Y_FP"][kk[0]])
        #if count>300 : break # debug

    for posid,deviceloc in zip(posids,devicelocs) :
        posid_tstamp[posid]=np.array(posid_tstamp[posid])
        posid_deltat[posid]=np.array(posid_deltat[posid])
        posid_x_dmt[posid]=np.array(posid_x_dmt[posid])
        posid_y_dmt[posid]=np.array(posid_y_dmt[posid])
        
    print("now for each positioner read pos_t and pos_p in db...")
    for posid,deviceloc in zip(posids,devicelocs) :
        cx.execute("select pos_t,pos_p,time_recorded,pos_id,petal_id,device_loc,log_note from posmovedb.positioner_moves_p{} where pos_id='{}' and time_recorded BETWEEN date '{}' and date '{}'".format(petalid,posid,args.date_min,args.date_max))
        data=cx.fetchall()
        pos_t = np.array([d[0] for d in data])
        pos_p = np.array([d[1] for d in data])
        date = np.array([d[2] for d in data])
        for i in range(len(date)) :
            #date[i].tzinfo = None  # does this help?
            date[i] = datetime.datetime(date[i].year,date[i].month,date[i].day,date[i].hour,date[i].minute,date[i].second) # get rid of time zone
        tstamp =  np.array([d.timestamp() for d in date])
        
        jj = np.where(np.in1d(tstamp,posid_tstamp[posid]))[0]
        print("for {} got {} entries in db, with {} matched to desimeter data".format(posid,len(data),jj.size))
        kk = np.argsort(tstamp[jj])
        jj = jj[kk]
        pos_t  = pos_t[jj]
        pos_p  = pos_p[jj]
        date   = date[jj]
        tstamp = tstamp[jj]
        dd = {t:i for i,t in enumerate(posid_tstamp[posid])}
        jj = [dd[t] for t in tstamp]
        x_dmt = posid_x_dmt[posid][jj]
        y_dmt = posid_y_dmt[posid][jj]
        deltat = posid_deltat[posid][jj]
        
        # save this
        jj=np.where(x_dmt!=0)[0]
        ot = Table()
        # add petal id
        ot["POS_ID"] = np.repeat(posid,jj.size)
        ot["PETAL_ID"] = np.repeat(petalid,jj.size)
        ot["PETAL_LOC"] = np.repeat(petalloc,jj.size)
        ot["DEVICE_LOC"] = np.repeat(deviceloc,jj.size)
        ot["DATE"]  = date[jj]
        ot["POS_P"] = pos_p[jj]
        ot["POS_T"] = pos_t[jj]
        ot["X_FP"]  = x_dmt[jj]
        ot["Y_FP"]  = y_dmt[jj]
        ot["DELTAT"]  = deltat[jj]
        
        #ot["DELTAT"] = dmt_deltat[jj]
        ofilename="results/{}.csv".format(posid)
        ot.write(ofilename,overwrite=True)
        print("wrote",ofilename)
        #sys.exit(12)
    
 
