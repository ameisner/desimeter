#!/usr/bin/env python


import argparse
import sys,os
import numpy as np
import yaml
from desimeter.log import get_logger
from pkg_resources import resource_filename
from astropy.table import Table
from desimeter.ptl2fp import apply_ptl2fp

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description="""Use one or several fitted metrology to update the coordinates of pinholes in the metrology patch data file""")

parser.add_argument('-o','--outfile', type = str, default = None, required = True, help = 'output csv file with updated patch (to be saved as a new version of fp-metrology-patch.csv if happy)')

parser.add_argument('-i','--infile', type = str, default = None, required = True, nargs="*", help = 'list of csv file with PETAL_LOC,DEVICE_LOC,PINHOLE_ID,X_FP,Y_FP or LOCATION,PINHOLE_ID,X_FP,Y_FP that will be matched to the patch file data (in fp-metrology-patch.csv)')


args  = parser.parse_args()
log = get_logger()

log.info("reading patch")
filename = resource_filename('desimeter',"data/fp-metrology-patch.csv")
log.info(" in {}".format(filename))
patch = Table.read(filename,format="csv")
ploc=(np.array(patch["PETAL_LOC"])*10000+np.array(patch["DEVICE_LOC"])*10+np.array(patch["PINHOLE_ID"])).astype(int)
#print(ploc)
#print(patch["LOCATION"])
#sys.exit(12)
xfp=dict()
yfp=dict()
for loc in ploc :
    xfp[loc]=list()
    yfp[loc]=list()

for filename in args.infile :
    log.info("reading {}".format(filename))
    spots = Table.read(filename,format="csv")
    if "LOCATION" in spots.dtype.names :
        sloc=(spots["LOCATION"]*10+spots["PINHOLE_ID"]).astype(int)
    else :
        sloc=(spots["PETAL_LOC"]*10000+spots["DEVICE_LOC"]*10+spots["PINHOLE_ID"]).astype(int)
    selection=(spots["PINHOLE_ID"]>0)
    print("spots LOC={}".format(sloc[selection]))
    
    for loc in ploc :
        ii = np.where(sloc==loc)[0]
        if ii.size == 1 :
            xfp[loc].append(spots["X_FP"][ii[0]])
            yfp[loc].append(spots["Y_FP"][ii[0]])

for loc in ploc :
    if len(xfp[loc])>0 :
        mx=np.median(xfp[loc])
        my=np.median(yfp[loc])
        print("{} x= {:4.3f} -> {:4.3f} ({})".format(loc,patch["X_FP"][ploc==loc][0],mx,len(xfp[loc])))
        print("{} y= {:4.3f} -> {:4.3f} ({})".format(loc,patch["Y_FP"][ploc==loc][0],my,len(yfp[loc])))
        patch["X_FP"][ploc==loc] = mx
        patch["Y_FP"][ploc==loc] = my
patch.write(args.outfile,format="csv")
print("wrote",args.outfile)

        
